function LocalDispatch(componentInstance, reducer){
  this.componentInstance = componentInstance;
  this.reducer = reducer;
  return function(action, mapper){
    this.action = action;
    this.mapper = mapper;
    if(typeof action === 'function') return action(this.dispatcher());
    return this.dispatchWithReducer(action);
  }.bind(this);
}

LocalDispatch.prototype.dispatchWithReducer = function(actionData){
  this.newState = this.reducer(this.componentInstance.state, actionData);
  if(this.hasNoMapper()) return this.componentInstance.setState(this.newState);
  if(this.isSingleMapper()) return this.componentInstance.setState(this.newState[this.mapper]);
  return this.setStateByMultipleMapper();
};

LocalDispatch.prototype.dispatcher = function(){
  return function(actionData){
    this.dispatchWithReducer(actionData);
  }.bind(this);
};

LocalDispatch.prototype.setStateByMultipleMapper = function(){
  var newStateMapped = {};
  var mapper = Object.assign({}, this.mapper);
  if(mapper.$main !== undefined){
    var newStateMain = this.newState[mapper.$main];
    newStateMapped = Object.assign({}, newStateMain);
    delete(mapper.$main);
  }
  Object.keys(mapper).forEach(function(key){
    var mapTo = mapper[key];
    newStateMapped[key] = this.newState[mapTo];
  }.bind(this));
  return this.componentInstance.setState(newStateMapped);
};

LocalDispatch.prototype.hasNoMapper = function(){
  return this.mapper === undefined;
};

LocalDispatch.prototype.isSingleMapper = function(){
  return typeof(this.mapper) === 'string';
};

module.exports = LocalDispatch;